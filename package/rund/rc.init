#!/bin/sh

if [ "$1" = "-noinit" ]; then
	# protect against exec'd instance of rund
	exit 0;
fi

PATH=/usr/sbin:/sbin:/usr/bin:/bin

echo "[`ktstamp -k`] start system ..."
# export PATH to rund
runc env PATH="$PATH"
if [ -f /etc/environment ]; then
	. /etc/environment
	# push environment into rund
	sed -e "/^#/d" -e "/^$/d" /etc/environment | xargs -L1 -d\\n runc env
fi

# set reboot behaviour
sysreboot cadsoft

# mount necessary filesystems
mount -n -tproc proc /proc
mount -n -tsysfs sys /sys
ROOTFS=`{ df -T /tmp 2> /dev/null || echo "nodev rootfs"; } | tail -n1 | { read DEV TYPE REST; echo $TYPE; }`
if [ "$ROOTFS" != tmpfs -a "$ROOTFS" != rootfs ]; then
	mount -n -ttmpfs tmp /tmp
	mount -n -ttmpfs run /run
fi
chmod a+w,+t /tmp
chmod a+w,+t /run

# start device manager
DEVFS=`{ df -T /dev 2> /dev/null || echo "nodev rootfs"; } | tail -n1 | { read DEV TYPE REST; echo $TYPE; }`

## DEVICE MANAGER START
## fdev START
echo "" > /proc/sys/kernel/hotplug
if [ "$DEVFS" != tmpfs -a "$DEVFS" != devtmpfs -a "$DEVFS" != rootfs ]; then
	mount -n -ttmpfs dev /dev
	mknod /dev/console c 5 1
	mknod /dev/null c 1 3
	mknod /dev/zero c 1 5
fi
runc add DETACH=0 fdev -b --wait=0
sockwait -r0.1 -f /dev/.fdev.coldplugged &
## fdev DONE
## devtmpfs START
if [ $DEVFS != devtmpfs ]; then
	mount -n -tdevtmpfs dev /dev
fi
## devtmpfs DONE
## udev START
echo "" > /proc/sys/kernel/hotplug
if [ $DEVFS != devtmpfs ]; then
	mount -n -tdevtmpfs dev /dev
fi
# code from slackware rc.udev
udevd --daemon
udevadm trigger --type=subsystems --action=add
udevadm trigger --type=devices --action=add
udevadm settle --timeout=120 &
## udev DONE
## DEVICE MANAGER DONE

# prepare /dev/shm
# /dev is always a TMPFS like filesystem
mkdir -p /dev/shm &

# prepare /dev/pts
mkdir -p /dev/pts
mount -n -tdevpts devpts /dev/pts

# if /dev was a rootfs type, then /media is on rootfs too
MEDIAFS=`{ df -T /media 2> /dev/null || echo "nodev rootfs"; } | tail -n1 | { read DEV TYPE REST; echo $TYPE; }`
if [ -d /media -a "$MEDIAFS" != rootfs ]; then
	# mount tmpfs for media mount points
	mount -n -ttmpfs nodev /media
fi

ip link set lo up
#ip addr add 127.0.0.1/8 dev lo

hostname -F /etc/hostname

# without device manager, add watchdog triggers here
for WDT in /dev/watchdog?; do runc watchdog add $WDT 1; done

echo "[`ktstamp -k`] restore state ..."

# remount /root read-write
# This will be commented by buildroot
# when BR2_TARGET_GENERIC_REMOUNT_RW is not set
mount -n /root -o remount,rw

# hardware clock
# not all systems come with an RTC ...
if [ -c /dev/rtc0 ]; then
	hwclock -s -l &
fi

# be warned, system time may not be good yet at this point
# you can't guarantee that /dev/rtc0 had a good battery ...
if [ -x /etc/persistentfs.sh ]; then
	/etc/persistentfs.sh
fi

# restore random seed
if [ -f /var/cache/random-seed ]; then 
	echo "[`ktstamp -k`] Set random seed"
	cat /var/cache/random-seed > /dev/urandom
fi &

# READY
echo "[`ktstamp -k`] Start services ..."
#runc add agetty -i -a root -L ttyS0 115200 vt100
runc add getty ttyS0 115200 vt100

## syslog start
# Start logging when /var/log/messages is writable
if touch /var/log/messages; then
	echo "[`ktstamp -k`] start syslog"
	runc add syslogd -n -b5
	runc add klogd -n
fi
## syslog end

## cron start
if [ -d /var/spool/cron ]; then
	echo "[`ktstamp -k`] start cron"
	runc add crond -f
fi
## cron end

## dropbear start
{
	KEYDIR=/etc/dropbear
	# Check for the Dropbear RSA key
	if [ ! -f $KEYDIR/dropbear_rsa_host_key ] ; then
		echo "[`ktstamp -k`] Generating RSA key ..."
		dropbearkey -t rsa -f $KEYDIR/dropbear_rsa_host_key > /dev/null
	fi

	# Check for the Dropbear DSS key
	if [ ! -f $KEYDIR/dropbear_dss_host_key ] ; then
		echo "[`ktstamp -k`] Generating DSA key ..."
		dropbearkey -t dss -f $KEYDIR/dropbear_dss_host_key > /dev/null
	fi
	umask 077
	echo "[`ktstamp -k`] start dropbear ..."
	runc add dropbear -B -F
} &
## dropbear end

## mosquitto start
echo "[`ktstamp -k`] Start Mosquitto ..."
runc add mosquitto -c /etc/mosquitto.conf
## mosquitto end

## dbus start
{
	echo "[`ktstamp -k`] Start D-BUS ..."
	mkdir -p /var/run/dbus
	rm -f /var/run/messagebus.pid
	runc add dbus-daemon --system --nofork --nopidfile
	sockwait /var/run/dbus/system_bus_socket

	## avahi start
	echo "[`ktstamp -k`] Start AVAHI ..."
	runc add avahi-daemon --no-proc-title -s &
	## avahi end
} &
## dbus end

if [ -x /etc/rc.local ]; then
	echo "[`ktstamp -k`] run /etc/rc.local ..."
	/etc/rc.local boot "$@"
fi

echo "[`ktstamp -k`] system up"
